var DependencyManager, merge;

DependencyManager = require("./DependencyManager");

merge = require("./helpers").merge;

module.exports = function() {
  var dependencyManager;
  dependencyManager = new DependencyManager;
  return {
    defineService: function(serviceName, constructor) {
      var currentState, newService, updateService;
      currentState = {};
      newService = new constructor(currentState);
      updateService = function(name) {
        if (!name) {
          return dependencyManager.updateProvider(serviceName, newService);
        } else {
          return dependencyManager.updateField("" + serviceName + "#" + name, newService[name]);
        }
      };
      dependencyManager.addSubscriber({
        setServices: function(newState) {
          currentState = merge(currentState, newState);
          newService = constructor(currentState);
          return updateService();
        },
        update: function() {
          return updateService();
        },
        subscribe: newService.subscribe
      });
      updateService();
      return {
        update: updateService
      };
    },
    useServices: function() {
      return {
        setServices: function(services) {
          return this.services = merge(this.services, services);
        },
        update: function() {
          return this.setState({
            services: this.services
          });
        },
        componentWillMount: function() {
          return dependencyManager.addSubscriber(this);
        },
        componentWillUnmount: function() {
          return dependencyManager.removeSubscriber(this);
        }
      };
    },
    clear: function() {
      return dependencyManager.clear();
    },
    getValue: function(name) {
      return dependencyManager.getValue(name);
    }
  };
};
