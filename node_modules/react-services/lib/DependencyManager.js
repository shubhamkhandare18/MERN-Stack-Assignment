var DependencyManager, merge,
  __hasProp = {}.hasOwnProperty;

merge = require("./helpers").merge;

DependencyManager = (function() {
  function DependencyManager() {
    this.subscribers = {};
    this.data = {};
  }

  DependencyManager.prototype.updateField = function(fieldName, value) {
    var newData, subscriberData, _i, _len, _ref, _results;
    this.data[fieldName] = value;
    _ref = this.getSubscribersForField(fieldName);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      subscriberData = _ref[_i];
      newData = {};
      newData[subscriberData.targetField] = value(subscriberData.subscriber);
      subscriberData.subscriber.setServices(newData);
      _results.push(subscriberData.subscriber.update());
    }
    return _results;
  };

  DependencyManager.prototype.getSubscribersForField = function(fieldName) {
    return this.subscribers[fieldName] || [];
  };

  DependencyManager.prototype.removeSubscriber = function(subscriber) {
    var key, list, _ref, _results;
    _ref = this.subscribers;
    _results = [];
    for (key in _ref) {
      if (!__hasProp.call(_ref, key)) continue;
      list = _ref[key];
      _results.push(this.subscribers[key] = list.filter(function(subscriberData) {
        return subscriberData.subscriber !== subscriber;
      }));
    }
    return _results;
  };

  DependencyManager.prototype.addSubscriber = function(subscriber) {
    var currentSubscribers, existingData, field, subscribedFields, targetField;
    if (subscriber.subscribe) {
      subscribedFields = subscriber.subscribe;
      existingData = {};
      for (targetField in subscribedFields) {
        if (!__hasProp.call(subscribedFields, targetField)) continue;
        field = subscribedFields[targetField];
        currentSubscribers = this.getSubscribersForField(field);
        if (this.data[field]) {
          existingData[targetField] = this.data[field](subscriber);
        }
        currentSubscribers.push({
          subscriber: subscriber,
          targetField: targetField
        });
        this.subscribers[field] = currentSubscribers;
      }
      return subscriber.setServices(existingData);
    }
  };

  DependencyManager.prototype.updateProvider = function(name, provider) {
    var key, value, _results;
    _results = [];
    for (key in provider) {
      value = provider[key];
      if (key !== "services") {
        _results.push(this.updateField(name + "#" + key, value));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  DependencyManager.prototype.clear = function() {
    this.subscribers = {};
    return this.data = {};
  };

  DependencyManager.prototype.getValue = function(name) {
    return this.data[name]();
  };

  return DependencyManager;

})();

module.exports = DependencyManager;
